#include "DHT.h"
#include <Servo.h>
#include <WiFiNINA.h>
#include <ArduinoHttpClient.h>
#include <ArduinoJson.h>

// WiFi-vaihtoehdot
#define DHTPIN 7
#define DHTTYPE DHT11
#define SERVO_PIN 8

DHT dht(DHTPIN, DHTTYPE);
Servo myServo;

// WiFi-verkkoasetukset
char ssid[] = "SAMK-IoT";         // WiFi SSID
char pass[] = "I0T#5amk";           // WiFi salasana
int minTemp = 0;  // Muuttuja minimi lämpötilalle
int maxTemp = 0;  // Muuttuja maksimi lämpötilalle


WiFiClient wifiClient;
HttpClient client = HttpClient(wifiClient, "10.222.209.100", 8080); // Palvelimen IP-osoite ja portti

int sensorValue = 0;

void setup() {
  // Alustetaan sarjaportti ja WiFi
  Serial.begin(9600);
  dht.begin();
  myServo.attach(SERVO_PIN);
  myServo.write(0); // Alkuasento

  // Yhdistä WiFiin
  int status = WL_IDLE_STATUS;
  while (status != WL_CONNECTED) {
    Serial.print("Yhdistetään verkkoon: ");
    Serial.println(ssid);
    status = WiFi.begin(ssid, pass);
    delay(5000);
  }
 // Yhdistetty verkkoon
  Serial.println("Yhdistetty verkkoon!");
  printWiFiStatus();
}

void loop() {
  
  fetchSettingsFromServer(); // Hae tiedot palvelimelta
  readTemp();  // Lue lämpötila
  sendDataToServer(sensorValue);  // Lähetä tiedot palvelimelle

  // Määritä servon tila lämpötilan perusteella
  if (sensorValue > maxTemp) {
    Serial.println("Kuuma!");
    myServo.write(0);
  } else if (sensorValue < minTemp) {
    Serial.println("Kylmä!");
    myServo.write(90);
  } else {
    Serial.println("Just hyvä!");
    myServo.write(45);
  }

  delay(10000);  // Lähetä tiedot 10 sekunnin välein
}

void readTemp() {
  float temp = dht.readTemperature();
  
  if (isnan(temp)) {
    Serial.println("Lämpötilan lukeminen epäonnistui!");
    return;
  }
  
  sensorValue = temp;
  Serial.print("Nykyinen lämpötila: ");
  Serial.println(sensorValue);
  delay(2000);
}

void fetchSettingsFromServer() {
  // Suorita GET-pyyntö olemassa olevalla httpclient-objektilla
  client.get("/settings");  // Korvaa /settings oikealla päätepisteellä
  
  // Vastaanota palvelimen vastaus
  int statusCode = client.responseStatusCode();
  String response = client.responseBody();

  if (statusCode == 200) {
    // Serial.print("HTTP Status Code: ");
    // Serial.println(statusCode);
    // Serial.print("Palvelimen vastaus: ");
    // Serial.println(response);

    // Jäsennä JSON-vastaus
    StaticJsonDocument<256> jsonDoc;  // Aseta sopiva kapasiteetti JSON-datalle
    DeserializationError error = deserializeJson(jsonDoc, response);

    if (!error) {
      // Lue arvot JSON-datasta
      minTemp = jsonDoc["minTemperature"];  // Oletetaan, että JSON sisältää avaimen "min"
      maxTemp = jsonDoc["maxTemperature"];  // Oletetaan, että JSON sisältää avaimen "max"

      // Serial.print("Min Temperature: ");
      // Serial.println(minTemp);
      // Serial.print("Max Temperature: ");
      // Serial.println(maxTemp);
    } else {
      Serial.print("JSON virhe: ");
      Serial.println(error.c_str());
    }
  } else {
    Serial.print("HTTP GET -virhe, statuskoodi: ");
    Serial.println(statusCode);
  }
}

void sendDataToServer(int temp) {
  // Lähetä HTTP POST -pyyntö palvelimelle
  // String postData = "temperature=" + String(temp);
  String postData = "{\"temperature\":" + String(temp) + "}";
  client.beginRequest();
  client.post("/temperature");  // Muuta tämä oikeaksi palvelimen päätepisteeksi
  // client.sendHeader("Content-Type", "application/x-www-form-urlencoded");
  client.sendHeader("Content-Type", "application/json");
  client.sendHeader("Content-Length", postData.length());
  client.beginBody();
  client.print(postData);
  client.endRequest();

  // Vastaanotto ja virheiden käsittely
  int statusCode = client.responseStatusCode();
  String response = client.responseBody();
  Serial.print("Vastaus: ");
  Serial.println(response);
  // Serial.print("HTTP Status Code: ");
  // Serial.println(statusCode);
}

void printWiFiStatus() {
  IPAddress ip = WiFi.localIP();
  Serial.print("IP-osoite: ");
  Serial.println(ip);
  Serial.print("SSID: ");
  Serial.println(WiFi.SSID());
  long rssi = WiFi.RSSI();
  Serial.print("Signaalin voimakkuus (RSSI): ");
  Serial.println(rssi);
  Serial.println("---------------------------------------");
}
